package org.borium.javarecompiler.classfile;

import static org.borium.javarecompiler.Statics.*;

import java.io.*;
import java.util.*;

/**
 * Print stream with indentation capability.
 */
public class IndentedOutputStream
{
	private static boolean _disableLocking = false;

	public static void disableLocking()
	{
		_disableLocking = true;
	}

	/** The print stream where all the stuff goes. */
	private PrintStream stream;

	/** Indentation level for iprint() and iprintln(). */
	private int indentLevel = 0;

	/**
	 * If true, all output generated by iprint/print/etc. goes into temporary list
	 * instead of actual output. When stream is unlocked, all temporary content goes
	 * to the output file.
	 */
	private boolean locked;

	private ArrayList<String> temporaryOutput;

	public IndentedOutputStream(String fileName) throws IOException
	{
		stream = new PrintStream(fileName);
		locked = false;
	}

	public void close()
	{
		if (locked)
		{
			unlock();
		}
		stream.close();
	}

	public void indent(int i)
	{
		indentLevel += i;
	}

	public void iprint(String string)
	{
		String output = "";
		for (int i = 0; i < indentLevel; i++)
		{
			output += "\t";
		}
		output += string;
		if (locked)
		{
			temporaryOutput.add(output);
		}
		else
		{
			stream.print(output);
		}
	}

	/**
	 * Indented print of binary data, 16 bytes with delimiters per line.
	 *
	 * @param info
	 */
	public void iprintln(byte[] info)
	{
		for (int start = 0; start < info.length; start += 16)
		{
			iprint("");
			for (int offset = 0; offset < 16; offset++)
			{
				if (start + offset >= info.length)
				{
					break;
				}
				printHex(info[start + offset], 2);
				if (offset == 7)
				{
					print(" | ");
				}
				else if (offset != 15)
				{
					print(" ");
				}
			}
			println();
		}
	}

	public void iprintln(byte[] info, int start, int length)
	{
		iprint("");
		println(info, start, length);
	}

	public void iprintln(String string)
	{
		iprint(string);
		println();
	}

	/**
	 * Method injects a string into the locked file. File is usually locked when
	 * local variables are generated, then this method is used to generate temporary
	 * local variables while the rest of output goes into temporary storage and the
	 * temporary storage will be added to the file when file is unlocked. This
	 * method is not thread-safe because locked flag is preserved and modified, but
	 * the stream itself is not thread-safe by design.
	 *
	 * @param string String to print with newline added to the end.
	 */
	public void liprintln(int temporaryIndent, String string)
	{
		if (!_disableLocking)
		{
			Assert(locked, "liprintln() is made for printing into locked files");
		}
		boolean saveLocked = locked;
		locked = false;
		int currentIndent = indentLevel;
		indentLevel = temporaryIndent;
		iprintln(string);
		indentLevel = currentIndent;
		locked = saveLocked;
	}

	public void lock()
	{
		if (!_disableLocking)
		{
			Assert(!locked, "Stream must be unlocked before locking");
			locked = true;
			temporaryOutput = new ArrayList<>();
		}
	}

	public void print(String string)
	{
		if (locked)
		{
			temporaryOutput.add(string);
		}
		else
		{
			stream.print(string);
		}
	}

	public void printHex(int value, int length)
	{
		String hex = Integer.toHexString(value);
		while (hex.length() < length)
		{
			hex = "0" + hex;
		}
		hex = hex.substring(hex.length() - length).toUpperCase();
		if (locked)
		{
			temporaryOutput.add(hex);
		}
		else
		{
			stream.print(hex);
		}
	}

	public void println()
	{
		if (locked)
		{
			temporaryOutput.add("\n");
		}
		else
		{
			stream.println();
		}
	}

	public void println(byte[] info, int start, int length)
	{
		for (int offset = start; offset < start + length; offset++)
		{
			printHex(info[offset], 2);
			print(" ");
		}
		println();
	}

	public void println(String string)
	{
		if (locked)
		{
			temporaryOutput.add(string + "\n");
		}
		else
		{
			stream.println(string);
		}
	}

	public void unlock()
	{
		if (!_disableLocking)
		{
			Assert(locked, "Stream must be locked before unlocking");
			locked = false;
			for (String string : temporaryOutput)
			{
				if (string.endsWith("\n"))
				{
					stream.println(string.substring(0, string.length() - 1));
				}
				else
				{
					stream.print(string);
				}
			}
		}
	}
}
